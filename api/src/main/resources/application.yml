logging:
  level:
    root: info

server:
  port: 8080
  shutdown: graceful

---
spring:
  config:
    activate:
      on-profile: default, local

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/insideout
    username: root
    password:
    hikari:
      maximum-pool-size: 10  # 최대 풀 크기
      minimum-idle: 10       # 최소 유휴 연결 수
      idle-timeout: 600000   # 유휴 연결의 최대 유지 시간 (밀리초)
      max-lifetime: 1800000  # 연결의 최대 수명 (밀리초)
      connection-timeout: 30000  # 연결을 얻기 위한 최대 대기 시간 (밀리초)
      pool-name: HikariCP    # 풀 이름

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: true
        jdbc:
          batch_size: 100
        order_updates: true
    show-sql: true

  jackson:
    property-naming-strategy: SNAKE_CASE

  data:
    redis:
      host: localhost
      port: 6379

  cloud:
    aws:
      credentials:
        accessKey: ${AWS_ACCESS_KEY_ID}
        secretKey: ${AWS_SECRET_ACCESS_KEY}
      region:
        static: ap-northeast-2
      s3:
        bucket: ${AWS_BUCKET}
    gcp:
      project-id: ${GOOGLE_CLOUD_PROJECT_ID}
      credentials:
        json: ${GOOGLE_CLOUD_JSON}
      bucket: ${GOOGLE_CLOUD_BUCKET}

jwt:
  secret-key: test==gslQJkmrazoY1ytKUji6V0Qd49dWiCXxXVFMFQLezNuxEoFTQ7Xl6A1F7piKFybsZnoE06nnvaMbpAbPcKoeBg==

---
spring:
  config:
    activate:
      on-profile: production

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${INSIDEOUT_DB_URL}
    username: ${INSIDEOUT_DB_USERNAME}
    password: ${INSIDEOUT_DB_PASSWORD}
    hikari:
      maximum-pool-size: 10  # 최대 풀 크기
      minimum-idle: 10       # 최소 유휴 연결 수
      idle-timeout: 600000   # 유휴 연결의 최대 유지 시간 (밀리초)
      max-lifetime: 1800000  # 연결의 최대 수명 (밀리초)
      connection-timeout: 30000  # 연결을 얻기 위한 최대 대기 시간 (밀리초)
      pool-name: HikariCP    # 풀 이름

  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        jdbc:
          batch_size: 100
        order_updates: true

  jackson:
    property-naming-strategy: SNAKE_CASE

  data:
    redis:
      host: ${INSIDEOUT_REDIS_HOST}
      port: ${INSIDEOUT_REDIS_PORT}

  cloud:
    aws:
      credentials:
        accessKey: ${AWS_ACCESS_KEY_ID}
        secretKey: ${AWS_SECRET_ACCESS_KEY}
      region:
        static: ap-northeast-2
      s3:
        bucket: ${AWS_BUCKET}
    gcp:
      project-id: ${GOOGLE_CLOUD_PROJECT_ID}
      credentials:
        json: ${GOOGLE_CLOUD_JSON}
      bucket: ${GOOGLE_CLOUD_BUCKET}
jwt:
  secret-key: ${INSIDEOUT_JWT_SECRET_KEY}
