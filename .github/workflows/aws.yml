name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: insideout
  ECS_SERVICE: insideout-production-ecs-service
  ECS_CLUSTER: insideout
  ECS_TASK_FAMILY: insideout
  CONTAINER_NAME: insideout


permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: --entrypoint redis-server

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4.2.1
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Wait for Redis to be ready
        run: |
          for i in {1..10}; do
            nc -z localhost 6379 && echo "Redis is up" && break
            echo "Waiting for Redis..."
            sleep 2
          done

      - name: Run Tests and Build
        run: ./gradlew build --info

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
          IMAGE_TAG: ${{ github.sha }}
          INSIDEOUT_DB_URL: ${{ secrets.INSIDEOUT_DB_URL }}
          INSIDEOUT_DB_USERNAME: ${{ secrets.INSIDEOUT_DB_USERNAME }}
          INSIDEOUT_DB_PASSWORD: ${{ secrets.INSIDEOUT_DB_PASSWORD }}
          INSIDEOUT_JWT_SECRET_KEY: ${{ secrets.INSIDEOUT_JWT_SECRET_KEY }}
          INSIDEOUT_REDIS_HOST: ${{ secrets.INSIDEOUT_REDIS_HOST }}
          INSIDEOUT_REDIS_PORT: ${{ secrets.INSIDEOUT_REDIS_PORT }}
        run: |
          docker build \
            --build-arg INSIDEOUT_DB_URL=${{ secrets.INSIDEOUT_DB_URL }} \
            --build-arg INSIDEOUT_DB_USERNAME=${{ secrets.INSIDEOUT_DB_USERNAME }} \
            --build-arg INSIDEOUT_DB_PASSWORD=${{ secrets.INSIDEOUT_DB_PASSWORD }} \
            --build-arg INSIDEOUT_JWT_SECRET_KEY=${{ secrets.INSIDEOUT_JWT_SECRET_KEY }} \
            --build-arg INSIDEOUT_REDIS_HOST=${{ secrets.INSIDEOUT_REDIS_HOST }} \
            --build-arg INSIDEOUT_REDIS_PORT=${{ secrets.INSIDEOUT_REDIS_PORT }} \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f app.Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Update ECS Task Definition with New Image
        id: update-task-def
        run: |
          echo "Fetching current task definition..."
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_FAMILY }} --query 'taskDefinition' --output json)
          echo "Current task definition: $TASK_DEFINITION"
          
          # 미리 이미지 URI 변수 선언
          IMAGE_URI="${{ secrets.AWS_ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}"
          echo "Using image URI: $IMAGE_URI"

          echo "Updating task definition with new image..."
          NEW_TASK_DEF=$(echo $TASK_DEFINITION | jq --arg IMAGE "$IMAGE_URI" '
          .containerDefinitions[0].image = $IMAGE |
          del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)
          ')
          echo "New task definition: $NEW_TASK_DEF"
          
          echo "$NEW_TASK_DEF" > new-task-def.json
          echo "Registering new task definition..."
          REGISTERED_TASK_DEF=$(aws ecs register-task-definition --cli-input-json file://new-task-def.json)
          echo "Registered task definition: $REGISTERED_TASK_DEF"
          TASK_DEF_ARN=$(echo $REGISTERED_TASK_DEF | jq -r '.taskDefinition.taskDefinitionArn')
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: new-task-def.json
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
